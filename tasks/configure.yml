---
- name:   "Check whether interface {{ libvirt_bridge.name }} exists"
  shell:  if nmcli con show br0 >/dev/null 2>&1; then echo "1"; else echo "0"; fi
  register:   libvirt_bridge_check

- name:   "Add bridge {{ libvirt_bridge.name }} for primary interface"
  command:  nmcli connection add con-name {{ libvirt_bridge.name }} type bridge
  when:   libvirt_bridge_check.stdout == "0"
  register:   libvirt_bridge_added

- name:   "Configure {{ libvirt_bridge.name }}"
  command: >
    nmcli con mod {{ libvirt_bridge.name }}
    bridge.stp no connection.autoconnect yes
    ipv4.addresses {{ libvirt_bridge.address }}
    ipv4.gateway {{ libvirt_bridge.gateway }}
    ipv4.method manual
    ipv4.dns {{ libvirt_bridge.dns|join(" ")|quote }}
    ipv6.method ignore
  when:   libvirt_bridge_added|changed
  register: libvirt_bridge_creation

  # TODO: Looking at 2.4.0.0-devel this isn't implemented in formatting terms
  #nmcli:
  #  conn_name:    "{{ libvirt_bridge.name }}"
  #  autoconnect:  yes
  #  ip4:  "{{ libvirt_bridge.address }}"
  #  gw4:  "{{ libvirt_bridge.gateway }}"
  #  stp:  no
  #  type: bridge
  #  state:  present

- name:   "Link {{ libvirt_bridge.physical }} to {{ libvirt_bridge.name }}"
  command: >
    nmcli con add
    autoconnect yes
    con-name {{ libvirt_bridge.slave }}
    ifname {{ libvirt_bridge.physical }}
    type bridge-slave
    master {{ libvirt_bridge.name }}
  when:   libvirt_bridge_creation|changed
  register: libvirt_bridge_linked

  # TODO: Looking at 2.4.0.0-devel this isn't even a type yet...
  #nmcli:
  #  name: "{{ libvirt_bridge.slave }}"
  #  autoconnect:  yes
  #  ifname: "{{ libvirt_bridge.physical }}"
  #  master: "{{ libvirt_bridge.name }}"
  #  type:   bridge-slave
  #  state:  present
- name:   "Ensure original {{ libvirt_bridge.replace }} interface is disabled"
  command: >
    nmcli con mod "{{ libvirt_bridge.replace }}"
    connection.autoconnect no
  when:   libvirt_bridge_linked|changed
  register: libvirt_disable_interface

- name: "Restart to update NetworkManager setup"
  shell: nohup bash -c 'sleep 2 && shutdown -r now "Reboot for networking"' &
  async: 0
  poll: 0
  ignore_errors: true
  when: libvirt_disable_interface|changed

- name: wait for host
  local_action: wait_for host={{ ansible_host | default(inventory_hostname,boolean=True) }} search_regex='OpenSSH' port=22 state='started' delay=30 timeout=300
  become: no
  when: libvirt_disable_interface|changed

- name: Check if libvirt interface is already defined
  stat: path=/etc/libvirt/qemu/networks/{{ libvirt_bridge.id }}.xml
  register: libvirt_interface_defined

- name: Render {{ libvirt_bridge.name }} configuration to libvirt as {{ libvirt_bridge.id }}
  template:
    src:  etc/bridge-def.xml.j2
    dest: /tmp/{{ libvirt_bridge.id }}.xml
    owner:  root
    group:  root
    mode:   0600
  when:   libvirt_interface_defined.stat.exists == False

- name: Define {{ libvirt_bridge.id }} in libvirt
  command:  virsh net-define /tmp/{{ libvirt_bridge.id }}.xml
  when:   libvirt_interface_defined.stat.exists == False

- name: Autostart {{ libvirt_bridge.id }} in libvirt
  command:  virsh net-autostart {{ libvirt_bridge.id }}
  when:   libvirt_interface_defined.stat.exists == False

- name: Start {{ libvirt_bridge.id }}
  command:  virsh net-start {{ libvirt_bridge.id }}
  when:   libvirt_interface_defined.stat.exists == False

## Serial communications setup
- name: Find tty group ID
  shell: egrep '^tty' /etc/group | awk -F':' '{ print $3 }'
  register: tty_group

- assert: that="{{ tty_group.stdout|trim|int }}"

- name: Alter pts for tty writable permissions, else you'll have no console
  lineinfile:
    dest:   /etc/fstab
    regexp: '^devpts\s+([^\s]+)\s+devpts\s+defaults((?:\s+\d){2}\s*)$'
    line:   'devpts{{ "\t" }}\1{{ "\t" }}devpts{{ "\t" }}defaults,gid={{ tty_group.stdout|trim }},mode=770\2'
    backrefs: yes
  register:   replaced_devpts

- name: Remount devpts if changed
  command:  mount -o remount /dev/pts
  when:   replaced_devpts|changed
